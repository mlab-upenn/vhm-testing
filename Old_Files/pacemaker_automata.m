function pace_para=pacemaker_automata(pace_para, A_get, V_get, pace_inter)
% This function update parameters for the pacemaker in one time stamp
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Inputs:
% A_get: Boolean, Atrium event sensed. Signal generated by the interface
%        function
% V_get: Boolean, Ventricle event sensed. Signal generated by the interface
%        function
% pace_para: Cell array, parameters for the DDD pacemaker
%    
%    Format: {'Component_name', State_index, current_Corresponding_timer,
%            default_corresponding_timer, corresponding_output_signal}
%
%        Components and their corresponding outputs:
%                  name                             output
%        LRI(Lowest rate interval)                  A_pace
%        AVI(Atrialventricular interval)            V_pace
%        ARP(Atrium repolarization period)          A_sense
%        VRP(Ventricular repolarization period)     V_sense
% pace_inter: time in ms of state.
% Outputs:
% pace_para: updated version of the input
% A_pace: Boolean, Atrial pacing signal sending to the interface function
% V_pace: Boolean, Ventricle pacing signal sending to the interface
% function
% Column 2 = State of each component (1 or 2, depends on each timer)
% Column 3 = Current timer (in ms)
% Column 4 = Default timer (in ms)
% Column 5 = sense or pace (row 1 is AP, row 2 is VP, row 3 is AS, row 4 is
% VS)

%% Constant values
%Row values
LRI = 1;
AVI = 2;
ARP = 3;
VRP = 4;

%Column values
CURRENT_STATE = 2;
CURRENT_TIMER = 3;
DEFAULT_TIMER = 4;

%State values
IDLE = 1;
ACTIVE = 2;

%% pace/sense variables
a_pace = pace_para{1,5};
v_pace = pace_para{2,5};
a_sense = pace_para{3,5};
v_sense = pace_para{4,5};

%% local signal variables
a_s=0;
a_p=0;
v_s=0;
v_p=0;

%% LRI

% if v_sense or v_pace
if v_pace || v_sense
    % reset LRI timer
    pace_para{LRI,CURRENT_TIMER}=pace_para{LRI,DEFAULT_TIMER};
end
% if timer didn't run out
if pace_para{LRI,CURRENT_TIMER}>0
    % timer
    pace_para{LRI,CURRENT_TIMER}=pace_para{LRI,CURRENT_TIMER}-pace_inter;
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %------Changed---------------
    % if AEI reached
    if pace_para{LRI,CURRENT_TIMER}==pace_para{AVI,DEFAULT_TIMER} && pace_para{AVI,CURRENT_STATE}==IDLE
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % pace atrium
        a_p=1;
    end
else
    % reset timer
    pace_para{LRI,CURRENT_TIMER}=pace_para{LRI,DEFAULT_TIMER};
end

%% AVI

switch pace_para{AVI,CURRENT_STATE}
    case IDLE % Idle
        % if a_sense or a_pace
        if a_sense || a_pace
            % go to AVI state
            pace_para{AVI,CURRENT_STATE}=ACTIVE;
        end
    case ACTIVE % AVI
        % if timer didn't run out
        if pace_para{AVI,CURRENT_TIMER}>0
            % timer
            pace_para{AVI,CURRENT_TIMER}=pace_para{AVI,CURRENT_TIMER}-pace_inter;
        else
            % reset AVI timer
            pace_para{AVI,CURRENT_TIMER}=pace_para{AVI,DEFAULT_TIMER};
            % pace ventricle
            v_p=1;
            % go back to Idle state
            pace_para{AVI,CURRENT_STATE}=IDLE;
        end
        % if v_sense
        if v_sense
            % reset AVI timer
            pace_para{AVI,CURRENT_TIMER}=pace_para{AVI,DEFAULT_TIMER};
            % go back to Idle state
            pace_para{AVI,CURRENT_STATE}=IDLE;
        end
end

%% ARP

switch pace_para{ARP,CURRENT_STATE}
    case IDLE % Idle
        % if atrium event sensed
        if A_get
            % if AVI is idle
            if pace_para{AVI,CURRENT_STATE}==IDLE
                % a_sense
                a_s=1;
            end
        end
        % if v_sense or v_pace
        if v_sense || v_pace
            % go to ARP state
            pace_para{ARP,CURRENT_STATE}=ACTIVE;
        end
    case ACTIVE % ARP
        % if timer didn't run out
        if pace_para{ARP,CURRENT_TIMER}>0
            % timer
            pace_para{ARP,CURRENT_TIMER}=pace_para{ARP,CURRENT_TIMER}-pace_inter;
        else
            % reset ARP timer
            pace_para{ARP,CURRENT_TIMER}=pace_para{ARP,DEFAULT_TIMER};
            % go back to Idle state
            pace_para{ARP,CURRENT_STATE}=IDLE;
        end
    
end

%% VRP

switch pace_para{VRP,CURRENT_STATE}
    case IDLE % Idle
        % if ventricle event sensed
        if V_get
            % v_sense
            v_s=1;
            % go to VRP state
            pace_para{VRP,CURRENT_STATE}=ACTIVE;
        end
        % if v_pace
        if v_pace
            % go to VRP state
            pace_para{VRP,CURRENT_STATE}=ACTIVE;
        end
         
    case ACTIVE % VRP
        % if timer didn't run out
        if pace_para{VRP,CURRENT_TIMER}>0
            % timer
            pace_para{VRP,CURRENT_TIMER}=pace_para{VRP,CURRENT_TIMER}-pace_inter;
        else
            % reset timer
            pace_para{VRP,CURRENT_TIMER}=pace_para{VRP,DEFAULT_TIMER};
            % go back to Idle state
            pace_para{VRP,CURRENT_STATE}=IDLE;
        end
    
end

%% update the local variables to global variables
temp={a_p;v_p;a_s;v_s};

pace_para=[pace_para(:,1:4),temp];





