clear;
%% Decide what to plot
plotSignals = 1;
plotTimers = 1;
plotIteratively = 0;

%% Decide what to test
doTest = 1;
allowTolerances = 1;
allowOffsets = 1;

%% Script Variables
% Timer Global Variables
avi_switch = 0;
vrp_switch = 0;
pvarp_switch = 0;
lri_flip = 0;
uri_switch = 0;

avi_init = 0;
vrp_init = 0;
pvarp_init = 0;
lri_init = 0;
uri_init = 0;
% Plot Variables
    %arrow properties
    roLength = 10;
    roTipAngle = 12;
    PACE_MAGNITUDE = 3;
    SENSE_MAGNITUDE = 2;
    REF_MAGNITUDE = 2;
    SIGN_MAGNITUDE = 0.3;
    %Title font properties
    TITLE_NAME = 'PaceMaker Operation';
    TITLE_FONT = 'AvantGarde';
    TITLE_FONT_SIZE = 20;
    TITLE_FONT_WEIGHT = 'Bold';
    %Signal plot font properties
    SIGNAL_NAME = 'PaceMaker Signals';
    SIGNAL_FONT = 'AvantGarde';
    SIGNAL_FONT_SIZE = 16;
    SIGNAL_FONT_WEIGHT = 'Bold';
    %Timer plot font properties
    TIMER_NAME = 'Timers'
    TIMER_FONT = 'Arial';
    TIMER_FONT_SIZE = 16;
    TIMER_FONT_WEIGHT = 'Bold';
    
    XAXIS_NAME = 'time (milliseconds)';
    XAXIS_FONT_WEIGHT = 'Bold';
    XAXIS_FONT_SIZE = 16;
    
    TEXT_FONT = 'Arial';
    TEXT_FONT_SIZE = 16;
    TEXT_FONT_WEIGHT = 'Bold';

%% Test Variables
%parameters
    tolerance_atrial = 100; %Acceptable tolerance (in ms) for detecting atrial output signals
    tolerance_ventrical = 100; %Acceptable tolerance for detecting ventricular output signals.
    greatestTolerance = max([tolerance_atrial, tolerance_ventrical]);
%Global Variables
    next_Line = 0; %variable to determine which line in the file is being processed
    offset = 0; %variable to store any necessary offsets
    a_ifPaced = 0; %boolean to determine if pacemaker paced atrium
    v_ifPaced = 0; %boolean to determine if pacemaker paced ventricle
    a_ifSensed = 0; %boolean to determine if pacemaker sensed atrium signal
    v_ifSensed = 0; %boolean to determine if pacemaker sensed ventricle signal
%%
load medtronic_params
pace_param.mode_switch = 'on';
pace_inter=1;

A_get=0;
V_get=0;

i=-1;
total_time = 5000;%ms

gdata=zeros(1,total_time);
%% Signal occurences
ASign = []%[0 300]; %times when an atrial signal occurs
VSign = []%[250]; %times when a venticular signal occurs
AOutput = []%[1000];
VOutput = []%[1250];
%% PreDraw Graphs
figure;
hold;
if plotSignals
    if plotTimers 
        subplot(2,1,1)
    end
    %Signal Plot
    title(TITLE_NAME,'FontName',TITLE_FONT,'FontWeight',TITLE_FONT_WEIGHT, 'FontSize', TITLE_FONT_SIZE);
    ylabel(SIGNAL_NAME,'FontName',SIGNAL_FONT,'FontWeight',SIGNAL_FONT_WEIGHT,'FontSize', SIGNAL_FONT_SIZE);
    xlabel(XAXIS_NAME,'FontWeight',XAXIS_FONT_WEIGHT,'FontSize', XAXIS_FONT_SIZE);
    set(gca,'Ylim',[-4,4],'Xlim',[0,total_time],'FontWeight','Bold','FontSize', 16);
    set(gca, 'YTickLabel', {' ',' ',' ',' ',' '});
    xVal = [0,total_time]; 
    yVal = [0,0];
    line(xVal, yVal, 'Color', 'k');
    grid on;
end

if plotTimers
    if plotSignals
        subplot(2,1,2);
    end
    %Timer Plot
    set(gca,'Ylim',[-4,4],'Xlim',[0,total_time]);
    set(gca, 'YTick',[-4:0.5:4]);
    set(gca, 'YTickLabel', {' ',' ',' ',' ',' ',' ',' ','URI',' ','LRI',' ','VARP',' ','VRP', ' ','AVI'},'FontWeight','Bold','FontSize', 16);
    ylabel(TIMER_NAME,'FontName',TIMER_FONT,'FontSize', TIMER_FONT_SIZE);
    xlabel(XAXIS_NAME,'FontWeight',XAXIS_FONT_WEIGHT,'FontSize', XAXIS_FONT_SIZE);
    grid on;
end

while i< total_time
    i=i+1;
    data=0;
    name = '';
    faceColor = 'k';
    %% Plot Pacemaker Sensing/Pacing
        if ismember(i,ASign)
            pace_param=pacemaker_new(pace_param, 1, V_get, 1);
            if plotSignals
                startArrow = [i,0];
                endArrow = [i,SIGN_MAGNITUDE];
                if plotTimers
                    subplot(2,1,1)
                end
                arrow(startArrow,endArrow,'Length', roLength, 'TipAngle',roTipAngle,'EdgeColor','k','FaceColor','y');
                text(i+10,SIGN_MAGNITUDE+0.4,'A Signal','FontWeight',TEXT_FONT_WEIGHT,'Fontsize', TEXT_FONT_SIZE); 
            end
        elseif ismember(i,VSign)
            pace_param=pacemaker_new(pace_param, A_get, 1, 1);
            if plotSignals
                startArrow = [i,0];
                endArrow = [i,-SIGN_MAGNITUDE];
                if plotTimers
                    subplot(2,1,1)
                end
                arrow(startArrow,endArrow,'Length', roLength, 'TipAngle',roTipAngle,'EdgeColor','k','FaceColor','w');
                text(i+10,-SIGN_MAGNITUDE-0.4,'V Signal','FontWeight',TEXT_FONT_WEIGHT,'Fontsize', TEXT_FONT_SIZE); 
            end
        else
            pace_param=pacemaker_new(pace_param, A_get, V_get, 1);
        end
        if plotSignals
            % a_pace
              if pace_param.a_pace
                  data=PACE_MAGNITUDE;
                  name = 'AP';
                  faceColor = 'r';
              end
              % v_pace
              if pace_param.v_pace               
                  data=-PACE_MAGNITUDE;
                  name = 'VP';
                  faceColor = 'm';
              end
              % a_sense
              if pace_param.a_sense
                  data=SENSE_MAGNITUDE;
                  name = 'AS';
                  faceColor = 'b';
              end
              % v_sense
              if pace_param.v_sense
                  data=-SENSE_MAGNITUDE;
                  name = 'VS';
                  faceColor = 'c';
              end
              if pace_param.a_ref
                  data=REF_MAGNITUDE;
                  name = '[AR]';
                  faceColor = 'g';
              end
              
              if(data ~= 0)
                  startArrow = [i,0];
                  
                  if data >= 0
                      height = data + 0.3;
                  else
                      height = data - 0.3;
                  end
                  endArrow = [i,data];
                  if plotTimers
                    subplot(2,1,1)
                  end
                  arrow(startArrow,endArrow,'Length', roLength, 'TipAngle',roTipAngle,'EdgeColor','k','FaceColor',faceColor);
                  text(i,height,name,'FontWeight',TEXT_FONT_WEIGHT,'Fontsize', TEXT_FONT_SIZE); 
              end
        end
   %% Plot Timer States
   if plotTimers
    %Constant values
    AVI_UPPER_Y = 4;
    AVI_LOWER_Y = 3;
    AVI_DEF_COLOR = [1 90/255 0];
    AVI_CUR_COLOR = 'red';
   
    VRP_UPPER_Y = 3;
    VRP_LOWER_Y =2;
    VRP_DEF_COLOR = [1 0 1];
    VRP_CUR_COLOR = [76/255 0 153/255];
   
    PVARP_UPPER_Y =2;
    PVARP_LOWER_Y =1;
    PVARP_DEF_COLOR = 'c';
    PVARP_CUR_COLOR = 'blue';
   
    LRI_UPPER_Y = 1;
    LRI_LOWER_Y = 0;
    LRI_DEF_COLOR = [0 128/255 128/255];
    LRI_CUR_COLOR = 'g';
   
    URI_UPPER_Y = 0;
    URI_LOWER_Y = -1;
    URI_DEF_COLOR = [207/255 181/255 59/255];
    URI_CUR_COLOR = 'y';
   
    BLOCK_COLOR = 'k';
    VSP_COLOR = 'w';
   
    %local variables
   
              %AVI  
              if ~strcmp(pace_param.AVI,'off')
                  %if timer just started, plot the expected timer time for
                  %AVI, ABP, and VSP (if on).
                 
                  if plotSignals
                    subplot(2,1,2)
                  end
                if pace_param.AVI_cur == pace_param.AVI_def
                    avi_switch = 1;
                    avi_init = i;
                    rectangle('Position',[i,AVI_LOWER_Y, pace_param.AVI_def,1],'FaceColor',AVI_DEF_COLOR);
                    rectangle('Position',[i,AVI_LOWER_Y, pace_param.ABP,0.5],'FaceColor',BLOCK_COLOR);
                    if strcmp(pace_param.VSP,'on')
                        rectangle('Position',[(i+pace_param.ABP),AVI_LOWER_Y, pace_param.VSP_sense,0.5],'FaceColor',VSP_COLOR);
                    end
                %else color the current timer state.    
                elseif plotIteratively
                    rectangle('Position',[i-1,AVI_LOWER_Y+0.5, 1,0.5],'FaceColor',AVI_CUR_COLOR,'EdgeColor', AVI_CUR_COLOR);
                end 
              end
              
              if ~plotIteratively
                if plotSignals
                    subplot(2,1,2)
                end
                if strcmp(pace_param.AVI,'off') && avi_switch==1
                    width = (i-1) - avi_init;
                    rectangle('Position',[avi_init,AVI_LOWER_Y+0.5,width,0.5],'FaceColor',AVI_CUR_COLOR);
                    avi_switch = 0;
                    avi_init = 0;
                end
              end
              
              %VRP
              if strcmp(pace_param.VRP, 'on')
                  if plotSignals
                    subplot(2,1,2)
                  end
                if pace_param.VRP_cur == pace_param.VRP_def ||pace_param.v_sense == 1 || pace_param.v_pace == 1
                    vrp_switch = 1;
                    vrp_init = i;
                    rectangle('Position',[i,VRP_LOWER_Y, pace_param.VRP_def,1],'FaceColor',VRP_DEF_COLOR);
                elseif plotIteratively
                    rectangle('Position',[i-1,VRP_LOWER_Y+0.5, 1,0.5],'FaceColor',VRP_CUR_COLOR,'EdgeColor', VRP_CUR_COLOR);
                end
              end
              if ~plotIteratively
                if strcmp(pace_param.VRP,'off') && vrp_switch==1
                    width = (i-1) - vrp_init;
                    rectangle('Position',[vrp_init,VRP_LOWER_Y+0.5,width,0.5],'FaceColor',VRP_CUR_COLOR);
                    vrp_switch = 0;
                    vrp_init = 0;
                end
              end
              
              % PVARP
              if strcmp(pace_param.PVARP, 'on')
                  if plotSignals
                    subplot(2,1,2)
                  end
                  if pace_param.PVARP_cur == pace_param.PVARP_def
                    pvarp_switch = 1;
                    pvarp_init = i;
                    rectangle('Position',[i,PVARP_LOWER_Y, pace_param.PVARP_def,1],'FaceColor',PVARP_DEF_COLOR);
                  elseif plotIteratively
                    rectangle('Position',[i-1,PVARP_LOWER_Y+0.5, 1,0.5],'FaceColor',PVARP_CUR_COLOR,'EdgeColor', PVARP_CUR_COLOR);
                  end
              end
              
              if ~plotIteratively
                  if strcmp(pace_param.PVARP,'off') && pvarp_switch==1
                    width = (i-1) - pvarp_init;
                    rectangle('Position',[pvarp_init,PVARP_LOWER_Y+0.5,width,0.5],'FaceColor',PVARP_CUR_COLOR);
                    pvarp_switch = 0;
                    pvarp_init = 0;
                  end
              end
              
              % LRI
                  if plotSignals
                    subplot(2,1,2)
                  end
                  if pace_param.LRI_cur == pace_param.LRI_def-1   
                    if lri_flip == 0
                        lri_flip  = 1;   
                    else
                        lri_flip = 0;
                    end  
                    if lri_flip 
                        position = 0.5;
                        pos = 0;
                    else
                        position = 0;
                        pos = 0.5;
                    end
                    rectangle('Position',[i,LRI_LOWER_Y + position, pace_param.LRI_def,0.5],'FaceColor',LRI_DEF_COLOR);
                    width = (i-1) - lri_init; 
                    if width > 0
                        rectangle('Position',[lri_init, LRI_LOWER_Y + pos,width,0.25],'FaceColor', LRI_CUR_COLOR);
                    end
                    lri_init = i;
                    
                  elseif plotIteratively
                    if lri_flip
                       pos = 0.5;
                    else
                       pos = 0;
                    end
                    rectangle('Position',[i-1,LRI_LOWER_Y+position, 1,0.25],'FaceColor',LRI_CUR_COLOR, 'EdgeColor', LRI_CUR_COLOR);  
                  end
                  
                  if i >= total_time
                    if lri_flip
                       pos = 0.5;
                    else
                       pos = 0;
                    end  
                    width = total_time - lri_init;
                    rectangle('Position',[lri_init, LRI_LOWER_Y + pos,width,0.25],'FaceColor', LRI_CUR_COLOR);
                  end
                  
              % URI
              if strcmp(pace_param.URI,'on')
                  if plotSignals
                    subplot(2,1,2)
                  end
                  if pace_param.URI_cur == pace_param.URI_def
                    uri_switch = 1;
                    uri_init = i;
                    rectangle('Position',[i,URI_LOWER_Y, pace_param.URI_def,1],'FaceColor',URI_DEF_COLOR);
                  elseif plotIteratively
                    rectangle('Position',[i-1,URI_LOWER_Y+0.5, 1,0.5],'FaceColor',URI_CUR_COLOR, 'EdgeColor', URI_CUR_COLOR);
                  end
              end
              
               if ~plotIteratively
                  if strcmp(pace_param.URI,'off') && uri_switch==1
                    width = (i-1) - uri_init;
                    rectangle('Position',[uri_init,URI_LOWER_Y+0.5,width,0.5],'FaceColor',URI_CUR_COLOR);
                    uri_switch = 0;
                    uri_init = 0;
                  end
              end
   end
 %% Store Data             
              gdata(i+1) = data;
    if plotIteratively
        pause(0.00001);
    end
end
if plotSignals || plotTimers
    set(gcf, 'PaperPositionMode', 'auto');
end